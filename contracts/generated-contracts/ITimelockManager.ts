/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ITimelockManagerInterface extends ethers.utils.Interface {
  functions: {
    "getIfTimelockIsRevertible(address)": FunctionFragment;
    "getRemainingAmount(address)": FunctionFragment;
    "getTimelock(address)": FunctionFragment;
    "getWithdrawable(address)": FunctionFragment;
    "permitTimelockToBeReverted()": FunctionFragment;
    "revertTimelock(address,address)": FunctionFragment;
    "transferAndLock(address,address,uint256,uint256,uint256)": FunctionFragment;
    "transferAndLockMultiple(address,address[],uint256[],uint256[],uint256[])": FunctionFragment;
    "updateApi3Pool(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawToPool(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getIfTimelockIsRevertible",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingAmount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getTimelock", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getWithdrawable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "permitTimelockToBeReverted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revertTimelock",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAndLock",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAndLockMultiple",
    values: [string, string[], BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateApi3Pool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawToPool",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getIfTimelockIsRevertible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitTimelockToBeReverted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAndLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAndLockMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateApi3Pool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToPool",
    data: BytesLike
  ): Result;

  events: {
    "Api3PoolUpdated(address)": EventFragment;
    "PermittedTimelockToBeReverted(address)": EventFragment;
    "RevertedTimelock(address,address,uint256)": EventFragment;
    "TransferredAndLocked(address,address,uint256,uint256,uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
    "WithdrawnToPool(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Api3PoolUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PermittedTimelockToBeReverted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevertedTimelock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferredAndLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnToPool"): EventFragment;
}

export type Api3PoolUpdatedEvent = TypedEvent<
  [string],
  { api3PoolAddress: string }
>;

export type Api3PoolUpdatedEventFilter = TypedEventFilter<Api3PoolUpdatedEvent>;

export type PermittedTimelockToBeRevertedEvent = TypedEvent<
  [string],
  { recipient: string }
>;

export type PermittedTimelockToBeRevertedEventFilter = TypedEventFilter<PermittedTimelockToBeRevertedEvent>;

export type RevertedTimelockEvent = TypedEvent<
  [string, string, BigNumber],
  { recipient: string; destination: string; amount: BigNumber }
>;

export type RevertedTimelockEventFilter = TypedEventFilter<RevertedTimelockEvent>;

export type TransferredAndLockedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    source: string;
    recipient: string;
    amount: BigNumber;
    releaseStart: BigNumber;
    releaseEnd: BigNumber;
  }
>;

export type TransferredAndLockedEventFilter = TypedEventFilter<TransferredAndLockedEvent>;

export type WithdrawnEvent = TypedEvent<
  [string, BigNumber],
  { recipient: string; amount: BigNumber }
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export type WithdrawnToPoolEvent = TypedEvent<
  [string, string, string],
  { recipient: string; api3PoolAddress: string; beneficiary: string }
>;

export type WithdrawnToPoolEventFilter = TypedEventFilter<WithdrawnToPoolEvent>;

export interface ITimelockManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITimelockManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getIfTimelockIsRevertible(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { revertStatus: boolean }>;

    getRemainingAmount(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { remainingAmount: BigNumber }>;

    getTimelock(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        remainingAmount: BigNumber;
        releaseStart: BigNumber;
        releaseEnd: BigNumber;
      }
    >;

    getWithdrawable(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { withdrawable: BigNumber }>;

    permitTimelockToBeReverted(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revertTimelock(
      recipient: string,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferAndLock(
      source: string,
      recipient: string,
      amount: BigNumberish,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferAndLockMultiple(
      source: string,
      recipients: string[],
      amounts: BigNumberish[],
      releaseStarts: BigNumberish[],
      releaseEnds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateApi3Pool(
      api3PoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToPool(
      api3PoolAddress: string,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getIfTimelockIsRevertible(
    recipient: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRemainingAmount(
    recipient: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimelock(
    recipient: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalAmount: BigNumber;
      remainingAmount: BigNumber;
      releaseStart: BigNumber;
      releaseEnd: BigNumber;
    }
  >;

  getWithdrawable(
    recipient: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  permitTimelockToBeReverted(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revertTimelock(
    recipient: string,
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferAndLock(
    source: string,
    recipient: string,
    amount: BigNumberish,
    releaseStart: BigNumberish,
    releaseEnd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferAndLockMultiple(
    source: string,
    recipients: string[],
    amounts: BigNumberish[],
    releaseStarts: BigNumberish[],
    releaseEnds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateApi3Pool(
    api3PoolAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToPool(
    api3PoolAddress: string,
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getIfTimelockIsRevertible(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRemainingAmount(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimelock(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        remainingAmount: BigNumber;
        releaseStart: BigNumber;
        releaseEnd: BigNumber;
      }
    >;

    getWithdrawable(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permitTimelockToBeReverted(overrides?: CallOverrides): Promise<void>;

    revertTimelock(
      recipient: string,
      destination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAndLock(
      source: string,
      recipient: string,
      amount: BigNumberish,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAndLockMultiple(
      source: string,
      recipients: string[],
      amounts: BigNumberish[],
      releaseStarts: BigNumberish[],
      releaseEnds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateApi3Pool(
      api3PoolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawToPool(
      api3PoolAddress: string,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Api3PoolUpdated(address)"(
      api3PoolAddress?: null
    ): Api3PoolUpdatedEventFilter;
    Api3PoolUpdated(api3PoolAddress?: null): Api3PoolUpdatedEventFilter;

    "PermittedTimelockToBeReverted(address)"(
      recipient?: null
    ): PermittedTimelockToBeRevertedEventFilter;
    PermittedTimelockToBeReverted(
      recipient?: null
    ): PermittedTimelockToBeRevertedEventFilter;

    "RevertedTimelock(address,address,uint256)"(
      recipient?: string | null,
      destination?: null,
      amount?: null
    ): RevertedTimelockEventFilter;
    RevertedTimelock(
      recipient?: string | null,
      destination?: null,
      amount?: null
    ): RevertedTimelockEventFilter;

    "TransferredAndLocked(address,address,uint256,uint256,uint256)"(
      source?: null,
      recipient?: string | null,
      amount?: null,
      releaseStart?: null,
      releaseEnd?: null
    ): TransferredAndLockedEventFilter;
    TransferredAndLocked(
      source?: null,
      recipient?: string | null,
      amount?: null,
      releaseStart?: null,
      releaseEnd?: null
    ): TransferredAndLockedEventFilter;

    "Withdrawn(address,uint256)"(
      recipient?: string | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(recipient?: string | null, amount?: null): WithdrawnEventFilter;

    "WithdrawnToPool(address,address,address)"(
      recipient?: string | null,
      api3PoolAddress?: null,
      beneficiary?: null
    ): WithdrawnToPoolEventFilter;
    WithdrawnToPool(
      recipient?: string | null,
      api3PoolAddress?: null,
      beneficiary?: null
    ): WithdrawnToPoolEventFilter;
  };

  estimateGas: {
    getIfTimelockIsRevertible(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemainingAmount(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimelock(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawable(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permitTimelockToBeReverted(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revertTimelock(
      recipient: string,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferAndLock(
      source: string,
      recipient: string,
      amount: BigNumberish,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferAndLockMultiple(
      source: string,
      recipients: string[],
      amounts: BigNumberish[],
      releaseStarts: BigNumberish[],
      releaseEnds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateApi3Pool(
      api3PoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToPool(
      api3PoolAddress: string,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getIfTimelockIsRevertible(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemainingAmount(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimelock(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawable(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permitTimelockToBeReverted(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revertTimelock(
      recipient: string,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferAndLock(
      source: string,
      recipient: string,
      amount: BigNumberish,
      releaseStart: BigNumberish,
      releaseEnd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferAndLockMultiple(
      source: string,
      recipients: string[],
      amounts: BigNumberish[],
      releaseStarts: BigNumberish[],
      releaseEnds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateApi3Pool(
      api3PoolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToPool(
      api3PoolAddress: string,
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
