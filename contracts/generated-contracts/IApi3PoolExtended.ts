/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IApi3PoolExtendedInterface extends ethers.utils.Interface {
  functions: {
    "agentAppPrimary()": FunctionFragment;
    "agentAppSecondary()": FunctionFragment;
    "api3Token()": FunctionFragment;
    "apr()": FunctionFragment;
    "delegatedToUser(address)": FunctionFragment;
    "getUser(address)": FunctionFragment;
    "proposalVotingPowerThreshold()": FunctionFragment;
    "stakeTarget()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "totalStake()": FunctionFragment;
    "userDelegate(address)": FunctionFragment;
    "userDelegateAt(address,uint256)": FunctionFragment;
    "userLocked(address)": FunctionFragment;
    "userStake(address)": FunctionFragment;
    "userVotingPower(address)": FunctionFragment;
    "userVotingPowerAt(address,uint256)": FunctionFragment;
    "votingAppPrimary()": FunctionFragment;
    "votingAppSecondary()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "agentAppPrimary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "agentAppSecondary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "api3Token", values?: undefined): string;
  encodeFunctionData(functionFragment: "apr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegatedToUser",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getUser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "proposalVotingPowerThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userDelegate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userDelegateAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userLocked", values: [string]): string;
  encodeFunctionData(functionFragment: "userStake", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userVotingPower",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userVotingPowerAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingAppPrimary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingAppSecondary",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "agentAppPrimary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agentAppSecondary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "api3Token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "apr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegatedToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalVotingPowerThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDelegateAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userLocked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userVotingPowerAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingAppPrimary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingAppSecondary",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IApi3PoolExtended extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IApi3PoolExtendedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    agentAppPrimary(overrides?: CallOverrides): Promise<[string]>;

    agentAppSecondary(overrides?: CallOverrides): Promise<[string]>;

    api3Token(overrides?: CallOverrides): Promise<[string]>;

    apr(overrides?: CallOverrides): Promise<[BigNumber]>;

    delegatedToUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        unstaked: BigNumber;
        vesting: BigNumber;
        unstakeShares: BigNumber;
        unstakeAmount: BigNumber;
        unstakeScheduledFor: BigNumber;
        lastDelegationUpdateTimestamp: BigNumber;
        lastProposalTimestamp: BigNumber;
      }
    >;

    proposalVotingPowerThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakeTarget(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    userDelegate(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    userDelegateAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    userLocked(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userStake(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userVotingPower(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userVotingPowerAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votingAppPrimary(overrides?: CallOverrides): Promise<[string]>;

    votingAppSecondary(overrides?: CallOverrides): Promise<[string]>;
  };

  agentAppPrimary(overrides?: CallOverrides): Promise<string>;

  agentAppSecondary(overrides?: CallOverrides): Promise<string>;

  api3Token(overrides?: CallOverrides): Promise<string>;

  apr(overrides?: CallOverrides): Promise<BigNumber>;

  delegatedToUser(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUser(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      unstaked: BigNumber;
      vesting: BigNumber;
      unstakeShares: BigNumber;
      unstakeAmount: BigNumber;
      unstakeScheduledFor: BigNumber;
      lastDelegationUpdateTimestamp: BigNumber;
      lastProposalTimestamp: BigNumber;
    }
  >;

  proposalVotingPowerThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  stakeTarget(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalStake(overrides?: CallOverrides): Promise<BigNumber>;

  userDelegate(userAddress: string, overrides?: CallOverrides): Promise<string>;

  userDelegateAt(
    userAddress: string,
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  userLocked(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userStake(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

  userVotingPower(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userVotingPowerAt(
    userAddress: string,
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votingAppPrimary(overrides?: CallOverrides): Promise<string>;

  votingAppSecondary(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    agentAppPrimary(overrides?: CallOverrides): Promise<string>;

    agentAppSecondary(overrides?: CallOverrides): Promise<string>;

    api3Token(overrides?: CallOverrides): Promise<string>;

    apr(overrides?: CallOverrides): Promise<BigNumber>;

    delegatedToUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        unstaked: BigNumber;
        vesting: BigNumber;
        unstakeShares: BigNumber;
        unstakeAmount: BigNumber;
        unstakeScheduledFor: BigNumber;
        lastDelegationUpdateTimestamp: BigNumber;
        lastProposalTimestamp: BigNumber;
      }
    >;

    proposalVotingPowerThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    stakeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    userDelegate(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    userDelegateAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    userLocked(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStake(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userVotingPower(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userVotingPowerAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingAppPrimary(overrides?: CallOverrides): Promise<string>;

    votingAppSecondary(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    agentAppPrimary(overrides?: CallOverrides): Promise<BigNumber>;

    agentAppSecondary(overrides?: CallOverrides): Promise<BigNumber>;

    api3Token(overrides?: CallOverrides): Promise<BigNumber>;

    apr(overrides?: CallOverrides): Promise<BigNumber>;

    delegatedToUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUser(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    proposalVotingPowerThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    stakeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    userDelegate(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDelegateAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userLocked(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStake(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userVotingPower(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userVotingPowerAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingAppPrimary(overrides?: CallOverrides): Promise<BigNumber>;

    votingAppSecondary(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    agentAppPrimary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    agentAppSecondary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    api3Token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    apr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegatedToUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalVotingPowerThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userDelegate(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userDelegateAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userLocked(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userStake(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userVotingPower(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userVotingPowerAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingAppPrimary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingAppSecondary(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
