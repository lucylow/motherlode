/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface GetterUtilsInterface extends ethers.utils.Interface {
  functions: {
    "EPOCH_LENGTH()": FunctionFragment;
    "REWARD_VESTING_PERIOD()": FunctionFragment;
    "agentAppPrimary()": FunctionFragment;
    "agentAppSecondary()": FunctionFragment;
    "api3Token()": FunctionFragment;
    "apr()": FunctionFragment;
    "aprUpdateStep()": FunctionFragment;
    "claimsManagerStatus(address)": FunctionFragment;
    "delegatedToUser(address)": FunctionFragment;
    "delegatedToUserAt(address,uint256)": FunctionFragment;
    "epochIndexOfLastReward()": FunctionFragment;
    "epochIndexToReward(uint256)": FunctionFragment;
    "genesisEpoch()": FunctionFragment;
    "getUser(address)": FunctionFragment;
    "isGenesisEpoch()": FunctionFragment;
    "maxApr()": FunctionFragment;
    "minApr()": FunctionFragment;
    "poolShares(uint256)": FunctionFragment;
    "proposalVotingPowerThreshold()": FunctionFragment;
    "setAprUpdateStep(uint256)": FunctionFragment;
    "setClaimsManagerStatus(address,bool)": FunctionFragment;
    "setDaoApps(address,address,address,address)": FunctionFragment;
    "setMaxApr(uint256)": FunctionFragment;
    "setMinApr(uint256)": FunctionFragment;
    "setProposalVotingPowerThreshold(uint256)": FunctionFragment;
    "setStakeTarget(uint256)": FunctionFragment;
    "setUnstakeWaitPeriod(uint256)": FunctionFragment;
    "stakeTarget()": FunctionFragment;
    "timelockManager()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "totalSharesAt(uint256)": FunctionFragment;
    "totalStake()": FunctionFragment;
    "unstakeWaitPeriod()": FunctionFragment;
    "updateLastProposalTimestamp(address)": FunctionFragment;
    "userDelegate(address)": FunctionFragment;
    "userDelegateAt(address,uint256)": FunctionFragment;
    "userLocked(address)": FunctionFragment;
    "userShares(address)": FunctionFragment;
    "userSharesAt(address,uint256)": FunctionFragment;
    "userStake(address)": FunctionFragment;
    "userToLockedCalculation(address)": FunctionFragment;
    "userVotingPower(address)": FunctionFragment;
    "userVotingPowerAt(address,uint256)": FunctionFragment;
    "users(address)": FunctionFragment;
    "votingAppPrimary()": FunctionFragment;
    "votingAppSecondary()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EPOCH_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_VESTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "agentAppPrimary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "agentAppSecondary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "api3Token", values?: undefined): string;
  encodeFunctionData(functionFragment: "apr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aprUpdateStep",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimsManagerStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatedToUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatedToUserAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochIndexOfLastReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochIndexToReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "genesisEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getUser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isGenesisEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxApr", values?: undefined): string;
  encodeFunctionData(functionFragment: "minApr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalVotingPowerThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAprUpdateStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimsManagerStatus",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDaoApps",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxApr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinApr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalVotingPowerThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeTarget",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnstakeWaitPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timelockManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSharesAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeWaitPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateLastProposalTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userDelegate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userDelegateAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userLocked", values: [string]): string;
  encodeFunctionData(functionFragment: "userShares", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userSharesAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userStake", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userToLockedCalculation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userVotingPower",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userVotingPowerAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [string]): string;
  encodeFunctionData(
    functionFragment: "votingAppPrimary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingAppSecondary",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "EPOCH_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_VESTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agentAppPrimary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agentAppSecondary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "api3Token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "apr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aprUpdateStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimsManagerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatedToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatedToUserAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochIndexOfLastReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochIndexToReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGenesisEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxApr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minApr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalVotingPowerThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAprUpdateStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimsManagerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDaoApps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMaxApr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMinApr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProposalVotingPowerThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnstakeWaitPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSharesAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeWaitPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLastProposalTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDelegateAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userLocked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userSharesAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userToLockedCalculation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userVotingPowerAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingAppPrimary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingAppSecondary",
    data: BytesLike
  ): Result;

  events: {
    "SetAprUpdateStep(uint256)": EventFragment;
    "SetClaimsManagerStatus(address,bool)": EventFragment;
    "SetDaoApps(address,address,address,address)": EventFragment;
    "SetMaxApr(uint256)": EventFragment;
    "SetMinApr(uint256)": EventFragment;
    "SetProposalVotingPowerThreshold(uint256)": EventFragment;
    "SetStakeTarget(uint256)": EventFragment;
    "SetUnstakeWaitPeriod(uint256)": EventFragment;
    "UpdatedLastProposalTimestamp(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetAprUpdateStep"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetClaimsManagerStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDaoApps"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxApr"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinApr"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetProposalVotingPowerThreshold"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStakeTarget"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUnstakeWaitPeriod"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatedLastProposalTimestamp"
  ): EventFragment;
}

export type SetAprUpdateStepEvent = TypedEvent<
  [BigNumber],
  { aprUpdateStep: BigNumber }
>;

export type SetAprUpdateStepEventFilter = TypedEventFilter<SetAprUpdateStepEvent>;

export type SetClaimsManagerStatusEvent = TypedEvent<
  [string, boolean],
  { claimsManager: string; status: boolean }
>;

export type SetClaimsManagerStatusEventFilter = TypedEventFilter<SetClaimsManagerStatusEvent>;

export type SetDaoAppsEvent = TypedEvent<
  [string, string, string, string],
  {
    agentAppPrimary: string;
    agentAppSecondary: string;
    votingAppPrimary: string;
    votingAppSecondary: string;
  }
>;

export type SetDaoAppsEventFilter = TypedEventFilter<SetDaoAppsEvent>;

export type SetMaxAprEvent = TypedEvent<[BigNumber], { maxApr: BigNumber }>;

export type SetMaxAprEventFilter = TypedEventFilter<SetMaxAprEvent>;

export type SetMinAprEvent = TypedEvent<[BigNumber], { minApr: BigNumber }>;

export type SetMinAprEventFilter = TypedEventFilter<SetMinAprEvent>;

export type SetProposalVotingPowerThresholdEvent = TypedEvent<
  [BigNumber],
  { proposalVotingPowerThreshold: BigNumber }
>;

export type SetProposalVotingPowerThresholdEventFilter = TypedEventFilter<SetProposalVotingPowerThresholdEvent>;

export type SetStakeTargetEvent = TypedEvent<
  [BigNumber],
  { stakeTarget: BigNumber }
>;

export type SetStakeTargetEventFilter = TypedEventFilter<SetStakeTargetEvent>;

export type SetUnstakeWaitPeriodEvent = TypedEvent<
  [BigNumber],
  { unstakeWaitPeriod: BigNumber }
>;

export type SetUnstakeWaitPeriodEventFilter = TypedEventFilter<SetUnstakeWaitPeriodEvent>;

export type UpdatedLastProposalTimestampEvent = TypedEvent<
  [string, BigNumber, string],
  { user: string; lastProposalTimestamp: BigNumber; votingApp: string }
>;

export type UpdatedLastProposalTimestampEventFilter = TypedEventFilter<UpdatedLastProposalTimestampEvent>;

export interface GetterUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GetterUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EPOCH_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    REWARD_VESTING_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    agentAppPrimary(overrides?: CallOverrides): Promise<[string]>;

    agentAppSecondary(overrides?: CallOverrides): Promise<[string]>;

    api3Token(overrides?: CallOverrides): Promise<[string]>;

    apr(overrides?: CallOverrides): Promise<[BigNumber]>;

    aprUpdateStep(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimsManagerStatus(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    delegatedToUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delegatedToUserAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochIndexOfLastReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochIndexToReward(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber] & {
        atBlock: number;
        amount: BigNumber;
        totalSharesThen: BigNumber;
        totalStakeThen: BigNumber;
      }
    >;

    genesisEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        unstaked: BigNumber;
        vesting: BigNumber;
        unstakeAmount: BigNumber;
        unstakeShares: BigNumber;
        unstakeScheduledFor: BigNumber;
        lastDelegationUpdateTimestamp: BigNumber;
        lastProposalTimestamp: BigNumber;
      }
    >;

    isGenesisEpoch(overrides?: CallOverrides): Promise<[boolean]>;

    maxApr(overrides?: CallOverrides): Promise<[BigNumber]>;

    minApr(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolShares(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { fromBlock: number; value: BigNumber }>;

    proposalVotingPowerThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAprUpdateStep(
      _aprUpdateStep: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClaimsManagerStatus(
      claimsManager: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDaoApps(
      _agentAppPrimary: string,
      _agentAppSecondary: string,
      _votingAppPrimary: string,
      _votingAppSecondary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxApr(
      _maxApr: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinApr(
      _minApr: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProposalVotingPowerThreshold(
      _proposalVotingPowerThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakeTarget(
      _stakeTarget: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnstakeWaitPeriod(
      _unstakeWaitPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeTarget(overrides?: CallOverrides): Promise<[BigNumber]>;

    timelockManager(overrides?: CallOverrides): Promise<[string]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSharesAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    unstakeWaitPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateLastProposalTimestamp(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userDelegate(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    userDelegateAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    userLocked(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { locked: BigNumber }>;

    userShares(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userSharesAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userStake(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userToLockedCalculation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        initialIndEpoch: BigNumber;
        nextIndEpoch: BigNumber;
        locked: BigNumber;
      }
    >;

    userVotingPower(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userVotingPowerAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        unstaked: BigNumber;
        vesting: BigNumber;
        unstakeAmount: BigNumber;
        unstakeShares: BigNumber;
        unstakeScheduledFor: BigNumber;
        lastDelegationUpdateTimestamp: BigNumber;
        lastProposalTimestamp: BigNumber;
      }
    >;

    votingAppPrimary(overrides?: CallOverrides): Promise<[string]>;

    votingAppSecondary(overrides?: CallOverrides): Promise<[string]>;
  };

  EPOCH_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  REWARD_VESTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  agentAppPrimary(overrides?: CallOverrides): Promise<string>;

  agentAppSecondary(overrides?: CallOverrides): Promise<string>;

  api3Token(overrides?: CallOverrides): Promise<string>;

  apr(overrides?: CallOverrides): Promise<BigNumber>;

  aprUpdateStep(overrides?: CallOverrides): Promise<BigNumber>;

  claimsManagerStatus(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  delegatedToUser(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delegatedToUserAt(
    userAddress: string,
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochIndexOfLastReward(overrides?: CallOverrides): Promise<BigNumber>;

  epochIndexToReward(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber] & {
      atBlock: number;
      amount: BigNumber;
      totalSharesThen: BigNumber;
      totalStakeThen: BigNumber;
    }
  >;

  genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getUser(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      unstaked: BigNumber;
      vesting: BigNumber;
      unstakeAmount: BigNumber;
      unstakeShares: BigNumber;
      unstakeScheduledFor: BigNumber;
      lastDelegationUpdateTimestamp: BigNumber;
      lastProposalTimestamp: BigNumber;
    }
  >;

  isGenesisEpoch(overrides?: CallOverrides): Promise<boolean>;

  maxApr(overrides?: CallOverrides): Promise<BigNumber>;

  minApr(overrides?: CallOverrides): Promise<BigNumber>;

  poolShares(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { fromBlock: number; value: BigNumber }>;

  proposalVotingPowerThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  setAprUpdateStep(
    _aprUpdateStep: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClaimsManagerStatus(
    claimsManager: string,
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDaoApps(
    _agentAppPrimary: string,
    _agentAppSecondary: string,
    _votingAppPrimary: string,
    _votingAppSecondary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxApr(
    _maxApr: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinApr(
    _minApr: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProposalVotingPowerThreshold(
    _proposalVotingPowerThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakeTarget(
    _stakeTarget: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnstakeWaitPeriod(
    _unstakeWaitPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeTarget(overrides?: CallOverrides): Promise<BigNumber>;

  timelockManager(overrides?: CallOverrides): Promise<string>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalSharesAt(
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalStake(overrides?: CallOverrides): Promise<BigNumber>;

  unstakeWaitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  updateLastProposalTimestamp(
    userAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userDelegate(userAddress: string, overrides?: CallOverrides): Promise<string>;

  userDelegateAt(
    userAddress: string,
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  userLocked(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userShares(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userSharesAt(
    userAddress: string,
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userStake(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

  userToLockedCalculation(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      initialIndEpoch: BigNumber;
      nextIndEpoch: BigNumber;
      locked: BigNumber;
    }
  >;

  userVotingPower(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userVotingPowerAt(
    userAddress: string,
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  users(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      unstaked: BigNumber;
      vesting: BigNumber;
      unstakeAmount: BigNumber;
      unstakeShares: BigNumber;
      unstakeScheduledFor: BigNumber;
      lastDelegationUpdateTimestamp: BigNumber;
      lastProposalTimestamp: BigNumber;
    }
  >;

  votingAppPrimary(overrides?: CallOverrides): Promise<string>;

  votingAppSecondary(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    EPOCH_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_VESTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    agentAppPrimary(overrides?: CallOverrides): Promise<string>;

    agentAppSecondary(overrides?: CallOverrides): Promise<string>;

    api3Token(overrides?: CallOverrides): Promise<string>;

    apr(overrides?: CallOverrides): Promise<BigNumber>;

    aprUpdateStep(overrides?: CallOverrides): Promise<BigNumber>;

    claimsManagerStatus(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delegatedToUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegatedToUserAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochIndexOfLastReward(overrides?: CallOverrides): Promise<BigNumber>;

    epochIndexToReward(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber] & {
        atBlock: number;
        amount: BigNumber;
        totalSharesThen: BigNumber;
        totalStakeThen: BigNumber;
      }
    >;

    genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        unstaked: BigNumber;
        vesting: BigNumber;
        unstakeAmount: BigNumber;
        unstakeShares: BigNumber;
        unstakeScheduledFor: BigNumber;
        lastDelegationUpdateTimestamp: BigNumber;
        lastProposalTimestamp: BigNumber;
      }
    >;

    isGenesisEpoch(overrides?: CallOverrides): Promise<boolean>;

    maxApr(overrides?: CallOverrides): Promise<BigNumber>;

    minApr(overrides?: CallOverrides): Promise<BigNumber>;

    poolShares(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { fromBlock: number; value: BigNumber }>;

    proposalVotingPowerThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    setAprUpdateStep(
      _aprUpdateStep: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimsManagerStatus(
      claimsManager: string,
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDaoApps(
      _agentAppPrimary: string,
      _agentAppSecondary: string,
      _votingAppPrimary: string,
      _votingAppSecondary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxApr(_maxApr: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMinApr(_minApr: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setProposalVotingPowerThreshold(
      _proposalVotingPowerThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakeTarget(
      _stakeTarget: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnstakeWaitPeriod(
      _unstakeWaitPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    timelockManager(overrides?: CallOverrides): Promise<string>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalSharesAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    unstakeWaitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    updateLastProposalTimestamp(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userDelegate(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    userDelegateAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    userLocked(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userShares(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userSharesAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStake(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userToLockedCalculation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        initialIndEpoch: BigNumber;
        nextIndEpoch: BigNumber;
        locked: BigNumber;
      }
    >;

    userVotingPower(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userVotingPowerAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        unstaked: BigNumber;
        vesting: BigNumber;
        unstakeAmount: BigNumber;
        unstakeShares: BigNumber;
        unstakeScheduledFor: BigNumber;
        lastDelegationUpdateTimestamp: BigNumber;
        lastProposalTimestamp: BigNumber;
      }
    >;

    votingAppPrimary(overrides?: CallOverrides): Promise<string>;

    votingAppSecondary(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "SetAprUpdateStep(uint256)"(
      aprUpdateStep?: null
    ): SetAprUpdateStepEventFilter;
    SetAprUpdateStep(aprUpdateStep?: null): SetAprUpdateStepEventFilter;

    "SetClaimsManagerStatus(address,bool)"(
      claimsManager?: string | null,
      status?: boolean | null
    ): SetClaimsManagerStatusEventFilter;
    SetClaimsManagerStatus(
      claimsManager?: string | null,
      status?: boolean | null
    ): SetClaimsManagerStatusEventFilter;

    "SetDaoApps(address,address,address,address)"(
      agentAppPrimary?: null,
      agentAppSecondary?: null,
      votingAppPrimary?: null,
      votingAppSecondary?: null
    ): SetDaoAppsEventFilter;
    SetDaoApps(
      agentAppPrimary?: null,
      agentAppSecondary?: null,
      votingAppPrimary?: null,
      votingAppSecondary?: null
    ): SetDaoAppsEventFilter;

    "SetMaxApr(uint256)"(maxApr?: null): SetMaxAprEventFilter;
    SetMaxApr(maxApr?: null): SetMaxAprEventFilter;

    "SetMinApr(uint256)"(minApr?: null): SetMinAprEventFilter;
    SetMinApr(minApr?: null): SetMinAprEventFilter;

    "SetProposalVotingPowerThreshold(uint256)"(
      proposalVotingPowerThreshold?: null
    ): SetProposalVotingPowerThresholdEventFilter;
    SetProposalVotingPowerThreshold(
      proposalVotingPowerThreshold?: null
    ): SetProposalVotingPowerThresholdEventFilter;

    "SetStakeTarget(uint256)"(stakeTarget?: null): SetStakeTargetEventFilter;
    SetStakeTarget(stakeTarget?: null): SetStakeTargetEventFilter;

    "SetUnstakeWaitPeriod(uint256)"(
      unstakeWaitPeriod?: null
    ): SetUnstakeWaitPeriodEventFilter;
    SetUnstakeWaitPeriod(
      unstakeWaitPeriod?: null
    ): SetUnstakeWaitPeriodEventFilter;

    "UpdatedLastProposalTimestamp(address,uint256,address)"(
      user?: string | null,
      lastProposalTimestamp?: null,
      votingApp?: null
    ): UpdatedLastProposalTimestampEventFilter;
    UpdatedLastProposalTimestamp(
      user?: string | null,
      lastProposalTimestamp?: null,
      votingApp?: null
    ): UpdatedLastProposalTimestampEventFilter;
  };

  estimateGas: {
    EPOCH_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_VESTING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    agentAppPrimary(overrides?: CallOverrides): Promise<BigNumber>;

    agentAppSecondary(overrides?: CallOverrides): Promise<BigNumber>;

    api3Token(overrides?: CallOverrides): Promise<BigNumber>;

    apr(overrides?: CallOverrides): Promise<BigNumber>;

    aprUpdateStep(overrides?: CallOverrides): Promise<BigNumber>;

    claimsManagerStatus(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegatedToUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegatedToUserAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochIndexOfLastReward(overrides?: CallOverrides): Promise<BigNumber>;

    epochIndexToReward(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getUser(userAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    isGenesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    maxApr(overrides?: CallOverrides): Promise<BigNumber>;

    minApr(overrides?: CallOverrides): Promise<BigNumber>;

    poolShares(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalVotingPowerThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    setAprUpdateStep(
      _aprUpdateStep: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClaimsManagerStatus(
      claimsManager: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDaoApps(
      _agentAppPrimary: string,
      _agentAppSecondary: string,
      _votingAppPrimary: string,
      _votingAppSecondary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxApr(
      _maxApr: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinApr(
      _minApr: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProposalVotingPowerThreshold(
      _proposalVotingPowerThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakeTarget(
      _stakeTarget: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnstakeWaitPeriod(
      _unstakeWaitPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    timelockManager(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalSharesAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    unstakeWaitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    updateLastProposalTimestamp(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userDelegate(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDelegateAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userLocked(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userShares(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userSharesAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userStake(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userToLockedCalculation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userVotingPower(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userVotingPowerAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    votingAppPrimary(overrides?: CallOverrides): Promise<BigNumber>;

    votingAppSecondary(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    EPOCH_LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARD_VESTING_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    agentAppPrimary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    agentAppSecondary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    api3Token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    apr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aprUpdateStep(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimsManagerStatus(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegatedToUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegatedToUserAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochIndexOfLastReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochIndexToReward(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genesisEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUser(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGenesisEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxApr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minApr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolShares(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalVotingPowerThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAprUpdateStep(
      _aprUpdateStep: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClaimsManagerStatus(
      claimsManager: string,
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDaoApps(
      _agentAppPrimary: string,
      _agentAppSecondary: string,
      _votingAppPrimary: string,
      _votingAppSecondary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxApr(
      _maxApr: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinApr(
      _minApr: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProposalVotingPowerThreshold(
      _proposalVotingPowerThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakeTarget(
      _stakeTarget: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnstakeWaitPeriod(
      _unstakeWaitPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelockManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSharesAt(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstakeWaitPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateLastProposalTimestamp(
      userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userDelegate(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userDelegateAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userLocked(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userShares(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userSharesAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userStake(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userToLockedCalculation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userVotingPower(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userVotingPowerAt(
      userAddress: string,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingAppPrimary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingAppSecondary(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
