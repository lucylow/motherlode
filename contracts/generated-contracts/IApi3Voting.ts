/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IApi3VotingInterface extends ethers.utils.Interface {
  functions: {
    "getVote(uint256)": FunctionFragment;
    "getVoterState(uint256,address)": FunctionFragment;
    "minAcceptQuorumPct()": FunctionFragment;
    "voteTime()": FunctionFragment;
    "votesLength()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterState",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "minAcceptQuorumPct",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "voteTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "votesLength",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVoterState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAcceptQuorumPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votesLength",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IApi3Voting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IApi3VotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getVote(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        open: boolean;
        executed: boolean;
        startDate: BigNumber;
        snapshotBlock: BigNumber;
        supportRequired: BigNumber;
        minAcceptQuorum: BigNumber;
        yea: BigNumber;
        nay: BigNumber;
        votingPower: BigNumber;
        script: string;
      }
    >;

    getVoterState(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    minAcceptQuorumPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    voteTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    votesLength(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  getVote(
    _voteId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      open: boolean;
      executed: boolean;
      startDate: BigNumber;
      snapshotBlock: BigNumber;
      supportRequired: BigNumber;
      minAcceptQuorum: BigNumber;
      yea: BigNumber;
      nay: BigNumber;
      votingPower: BigNumber;
      script: string;
    }
  >;

  getVoterState(
    _voteId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<number>;

  minAcceptQuorumPct(overrides?: CallOverrides): Promise<BigNumber>;

  voteTime(overrides?: CallOverrides): Promise<BigNumber>;

  votesLength(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    getVote(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        open: boolean;
        executed: boolean;
        startDate: BigNumber;
        snapshotBlock: BigNumber;
        supportRequired: BigNumber;
        minAcceptQuorum: BigNumber;
        yea: BigNumber;
        nay: BigNumber;
        votingPower: BigNumber;
        script: string;
      }
    >;

    getVoterState(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<number>;

    minAcceptQuorumPct(overrides?: CallOverrides): Promise<BigNumber>;

    voteTime(overrides?: CallOverrides): Promise<BigNumber>;

    votesLength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getVote(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterState(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minAcceptQuorumPct(overrides?: CallOverrides): Promise<BigNumber>;

    voteTime(overrides?: CallOverrides): Promise<BigNumber>;

    votesLength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getVote(
      _voteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterState(
      _voteId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAcceptQuorumPct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
