/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IStateUtils, IStateUtilsInterface } from "../IStateUtils";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "aprUpdateStep",
        type: "uint256",
      },
    ],
    name: "SetAprUpdateStep",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "claimsManager",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "SetClaimsManagerStatus",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "agentAppPrimary",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "agentAppSecondary",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "votingAppPrimary",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "votingAppSecondary",
        type: "address",
      },
    ],
    name: "SetDaoApps",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "maxApr",
        type: "uint256",
      },
    ],
    name: "SetMaxApr",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "minApr",
        type: "uint256",
      },
    ],
    name: "SetMinApr",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "proposalVotingPowerThreshold",
        type: "uint256",
      },
    ],
    name: "SetProposalVotingPowerThreshold",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "stakeTarget",
        type: "uint256",
      },
    ],
    name: "SetStakeTarget",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "unstakeWaitPeriod",
        type: "uint256",
      },
    ],
    name: "SetUnstakeWaitPeriod",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lastProposalTimestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "votingApp",
        type: "address",
      },
    ],
    name: "UpdatedLastProposalTimestamp",
    type: "event",
  },
  {
    inputs: [],
    name: "isGenesisEpoch",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_aprUpdateStep",
        type: "uint256",
      },
    ],
    name: "setAprUpdateStep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "claimsManager",
        type: "address",
      },
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "setClaimsManagerStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_agentAppPrimary",
        type: "address",
      },
      {
        internalType: "address",
        name: "_agentAppSecondary",
        type: "address",
      },
      {
        internalType: "address",
        name: "_votingAppPrimary",
        type: "address",
      },
      {
        internalType: "address",
        name: "_votingAppSecondary",
        type: "address",
      },
    ],
    name: "setDaoApps",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_maxApr",
        type: "uint256",
      },
    ],
    name: "setMaxApr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_minApr",
        type: "uint256",
      },
    ],
    name: "setMinApr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_proposalVotingPowerThreshold",
        type: "uint256",
      },
    ],
    name: "setProposalVotingPowerThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_stakeTarget",
        type: "uint256",
      },
    ],
    name: "setStakeTarget",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_unstakeWaitPeriod",
        type: "uint256",
      },
    ],
    name: "setUnstakeWaitPeriod",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
    ],
    name: "updateLastProposalTimestamp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IStateUtils__factory {
  static readonly abi = _abi;
  static createInterface(): IStateUtilsInterface {
    return new utils.Interface(_abi) as IStateUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IStateUtils {
    return new Contract(address, _abi, signerOrProvider) as IStateUtils;
  }
}
